{"version":3,"sources":["feature/common/reactUtil.ts","feature/calculator/Calculator.tsx","feature/singlePlay/SinglePlay.tsx","app/App.tsx","index.tsx"],"names":["handleNumberStateChange","event","setState","newVal","parseInt","currentTarget","value","isNaN","Calculator","useState","numPlayer","setNumPlayer","maxCount","setMaxCount","numEnd","setNumEnd","Box","sx","paddingBottom","TextField","required","id","label","type","onChange","Divider","variant","SinglePlay","Title","Typography","component","MainTab","tabId","setTabId","Tabs","_","newTabId","Tab","TabPanel","index","props","children","other","role","hidden","toString","p","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAQO,SAASA,EAAwBC,EAA4DC,GAChG,IAAMC,EAASC,SAASH,EAAMI,cAAcC,OACxCC,MAAMJ,IAAWA,EAAS,EAC1BD,EAAS,GAGbA,EAASC,G,WCKEK,MAff,WAAuB,IAAD,EACgBC,mBAAS,GADzB,mBACXC,EADW,KACAC,EADA,OAEcF,mBAAS,GAFvB,mBAEXG,EAFW,KAEDC,EAFC,OAGUJ,mBAAS,IAHnB,mBAGXK,EAHW,KAGHC,EAHG,KAKlB,OAAO,gCACH,eAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,cAAe,UAAzB,UACI,cAACC,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,aAAaC,MAAM,qBAAMC,KAAK,SAASjB,MAAOI,EAAWc,SAAU,SAACvB,GAAD,OAAWD,EAAwBC,EAAOU,MACpI,cAACQ,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,YAAYC,MAAM,+CAAYC,KAAK,SAASjB,MAAOM,EAAUY,SAAU,SAACvB,GAAD,OAAWD,EAAwBC,EAAOY,MACxI,cAACM,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,UAAUC,MAAM,kCAASC,KAAK,SAASjB,MAAOQ,EAAQU,SAAU,SAACvB,GAAD,OAAWD,EAAwBC,EAAOc,SAErI,cAACU,EAAA,EAAD,CAASC,QAAQ,eCTVC,MANf,WACI,OAAO,8CCQX,SAASC,IACP,OAAO,cAACC,EAAA,EAAD,CAAYH,QAAQ,KAAKI,UAAU,KAAnC,uGAKT,SAASC,IAAW,IAAD,EACStB,mBAAS,cADlB,mBACVuB,EADU,KACHC,EADG,KAKjB,OAAO,gCACL,eAACC,EAAA,EAAD,CAAM5B,MAAO0B,EAAOR,SAJE,SAACW,EAAyBC,GAChDH,EAASG,IAGT,UACE,cAACC,EAAA,EAAD,CAAKf,MAAM,kCAAShB,MAAM,eAC1B,cAAC+B,EAAA,EAAD,CAAKf,MAAM,kCAAShB,MAAM,mBAE5B,cAACgC,EAAD,CAAUhC,MAAO0B,EAAOO,MAAO,aAA/B,SACE,cAAC,EAAD,MAEF,cAACD,EAAD,CAAUhC,MAAO0B,EAAOO,MAAO,cAA/B,SACE,cAAC,EAAD,SAKN,SAASD,EAASE,GAA+D,IACxElC,EAAoCkC,EAApClC,MAAOiC,EAA6BC,EAA7BD,MAAOE,EAAsBD,EAAtBC,SAAaC,EAD4C,YACnCF,EADmC,8BAE9E,OAAO,6CAAKG,KAAK,WAAWC,OAAQtC,IAAUiC,EAAOlB,GAAIkB,EAAMM,YAAgBH,GAAxE,aACL,cAAC1B,EAAA,EAAD,CAAKC,GAAI,CAAC6B,EAAG,GAAb,SACGL,OAcQM,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAACpB,EAAD,IACA,cAACG,EAAD,QC3CNkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.928f1082.chunk.js","sourcesContent":["import { ChangeEvent, Dispatch, SetStateAction } from \"react\";\n\n/**\n * @description update state as user change input.\n * if input is not a positive integer, set as 0.\n * @param event Html change event\n * @param setState state setter\n */\nexport function handleNumberStateChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, setState: Dispatch<SetStateAction<number>>): void {\n    const newVal = parseInt(event.currentTarget.value);\n    if (isNaN(newVal) || newVal < 0) {\n        setState(0);\n        return;\n    }\n    setState(newVal);\n}\n","import { Box, Divider, TextField } from \"@mui/material\";\nimport { useState } from \"react\"\nimport { handleNumberStateChange } from \"../common/reactUtil\";\n\nfunction Calculator() {\n    const [numPlayer, setNumPlayer] = useState(3);\n    const [maxCount, setMaxCount] = useState(3);\n    const [numEnd, setNumEnd] = useState(31);\n\n    return <div>\n        <Box sx={{paddingBottom: \"2.5rem\"}}>\n            <TextField required id=\"num-player\" label=\"인원수\" type=\"number\" value={numPlayer} onChange={(event) => handleNumberStateChange(event, setNumPlayer)}/>\n            <TextField required id=\"max-count\" label=\"최대 말하는 갯수\" type=\"number\" value={maxCount} onChange={(event) => handleNumberStateChange(event, setMaxCount)}/>\n            <TextField required id=\"num-end\" label=\"마지막 숫자\" type=\"number\" value={numEnd} onChange={(event) => handleNumberStateChange(event, setNumEnd)}/> \n        </Box>\n        <Divider variant=\"middle\" />\n    </div>\n}\n\nexport default Calculator","function SinglePlay() {\n    return <div>\n        SinglePlay\n    </div>\n}\n\nexport default SinglePlay","import { Box, Tab, Tabs, Typography } from '@mui/material';\nimport { useState } from 'react';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport Calculator from '../feature/calculator/Calculator';\nimport SinglePlay from '../feature/singlePlay/SinglePlay';\n\nfunction Title() {\n  return <Typography variant='h2' component=\"h2\">\n    베스킨라빈스 31 술게임 시뮬레이터\n  </Typography>\n}\n\nfunction MainTab() {\n  const [tabId, setTabId] = useState(\"calculator\");\n  const handleTabChange = (_: React.SyntheticEvent, newTabId: string) => {\n    setTabId(newTabId);\n  }\n  return <div>\n    <Tabs value={tabId} onChange={handleTabChange}>\n      <Tab label=\"승률 계산기\" value=\"calculator\"/>\n      <Tab label=\"싱글 플레이\" value=\"single-play\"/>\n    </Tabs>\n    <TabPanel value={tabId} index={\"calculator\"}>\n      <Calculator />\n    </TabPanel>\n    <TabPanel value={tabId} index={\"single-play\"}>\n      <SinglePlay />\n    </TabPanel>\n  </div>\n}\n\nfunction TabPanel(props: {value: string, index: string, children: JSX.Element}) {\n  const {value, index, children, ...other} = props;\n  return <div role=\"tabpanel\" hidden={value !== index} id={index.toString()} {...other}>\n    <Box sx={{p: 3}}>\n      {children}\n    </Box>\n  </div>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title />\n      <MainTab />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}