{"version":3,"file":"static/js/983.058a85e2.chunk.js","mappings":"qKAIA,SAASA,EAASC,GAOoBA,EAA1BC,OAAR,IAAgBC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,OACvB,OAAO,eAAGC,GAAG,OAAN,WACH,iBAAMC,EAAE,OACP,CAAC,EAAG,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAGC,KAAI,SAACC,EAAOC,GAAR,OACrD,0BACI,iBAAMH,EAAE,IAAII,EAAGN,GAAQ,EAAEI,GAAzB,mBAA2C,IAANA,EAArC,QACA,iBAA6BG,OAAO,OAAOC,gBAAgB,MAAMC,GAAI,GAAIC,GAAIV,EAAOI,EAAOO,GAAIZ,EAAM,IAAKa,GAAIZ,EAAOI,GAArH,kBAAsBC,aAqEtC,SAASQ,EAAWhB,GAOhB,IAAQC,EAAWD,EAAXC,OACFgB,EAhEV,SACIhB,GAMA,IAFA,IAAIgB,EAAoB,CAAC,SACrBC,EAAkB,GACdC,EAAa,EAAGA,EAAIlB,EAAOmB,OAAQD,IACvCD,EAAKC,EAAE,GAAKlB,EAAOkB,GAAGZ,MAAQN,EAAOkB,EAAE,GAAGZ,MAI9C,IAFA,IAAIc,EAAgB,GAChBC,EAAO,EACLA,EAAKJ,EAAKE,QACZ,GAAGF,EAAKI,GAAM,EAAG,CAEb,IADA,IAAIC,EAAOD,EAAK,EACVC,EAAKL,EAAKE,QAAQ,CACpB,GAAGF,EAAKK,GAAM,EAAG,CACbF,EAAO,OACP,MACE,GAAGH,EAAKK,GAAM,EAAG,CACnBF,EAAO,QACP,MAEAE,IAGR,IAAI,IAAIC,EAAaF,EAAME,EAAID,EAAMC,IACjCP,EAAOO,EAAE,GAAKH,EAElBC,GAAQC,EAAKD,OACX,GAAGJ,EAAKI,GAAM,EAAG,CAEnB,IADA,IAAIC,EAAOD,EAAK,EACVC,EAAKL,EAAKE,QAAQ,CACpB,GAAGF,EAAKK,GAAM,EAAG,CACbF,EAAO,QACP,MACE,GAAGH,EAAKK,GAAM,EAAG,CACnBF,EAAO,MACP,MAEAE,IAGR,IAAI,IAAIC,EAAaF,EAAME,EAAID,EAAMC,IACjCP,EAAOO,EAAE,GAAKH,EAElBC,GAAQC,EAAKD,OAEbL,EAAOK,EAAK,GAAKD,EACjBC,IAIR,OADAL,EAAOhB,EAAOmB,OAAS,GAAK,QACrBH,EAWQQ,CAAqBxB,GACpC,OAAO,0BACH,iBAAMyB,KAAK,OAAOhB,OAAO,QAAQiB,YAAY,MAAMC,EAC/C,YAAK3B,EAAO,GAAGI,EAAE,GAAjB,YAAuBJ,EAAO,GAAGQ,GACjCR,EAAOK,KAAI,gBAAED,EAAF,EAAEA,EAAGI,EAAL,EAAKA,EAAL,kBAAiBJ,EAAE,GAAnB,aAA0BI,MAAKoB,KAAK,OAElD5B,EAAOK,KAAI,WAAgBE,GAAhB,IAAEH,EAAF,EAAEA,EAAGI,EAAL,EAAKA,EAAGF,EAAR,EAAQA,MAAR,OAAwB,mBAAuBuB,GAAIzB,EAAE,GAAI0B,GAAItB,EAAGuB,EAAE,IAAIN,KAAMT,EAAOT,GAAMyB,SAAUzB,EAAK0B,QAAS,WAAKC,QAAQC,IAAR,wBAA6B/B,EAA7B,aAAmCI,EAAnC,aAAyCF,MAAvI,UAAgBC,UA2B5D,UAvBA,SAAkBR,GAOd,IAAOqC,EAA6CrC,EAA7CqC,UAAWC,EAAkCtC,EAAlCsC,QAASC,EAAyBvC,EAAzBuC,OAAQrC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,OAEpCqC,GADUC,EAAAA,EAAAA,oBAAmBJ,EAAWC,EAASC,GAClCjC,KAAI,SAACoC,GAAD,OAASA,EAAI,MAEhCC,GAASC,EAAAA,EAAAA,KAAcC,OAAO,CAAC,EAAGL,EAAKpB,OAAO,IAAI0B,MAAM,CAAC,EAAG5C,IAC5D6C,GAASH,EAAAA,EAAAA,KAAcC,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,EAAG3C,IAChDF,EAASuC,EAAKlC,KAAI,SAAC0C,EAAGxC,GAAJ,MAAa,CAACH,EAAGsC,EAAOnC,GAAMC,EAAGsC,EAAOC,GAAIzC,MAAOyC,MAE3E,OAAO,SAAC,IAAD,CAAKC,GAAI,CAACD,EAAG,EAAG9C,MAAOA,EAAOC,OAAQA,GAAtC,UACH,iBAAK+C,QAAO,kBAAahD,EAAM,IAAnB,YAA0BC,EAAO,KAAOD,MAAOA,EAAOC,OAAQA,EAA1E,WACI,SAACJ,EAAD,CAAUE,OAAQA,EAAQC,MAAOA,EAAOC,OAAQA,KAChD,SAACa,EAAD,CAAYf,OAAQA","sources":["feature/calculator/Chart.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\nimport { getFullLoseProbMat } from \"baskin-lib/dist/lib/strategy\";\nimport { scaleLinear } from \"d3-scale\";\n\nfunction AxisTick(props : {\n    width : number,\n    height : number,\n    points : {\n        y: number\n    }[]\n}) {\n    const { points, width, height } = props;\n    return <g id=\"axis\">\n        <line x=\"50\"></line>\n        {[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1].map((value, idx)=>(\n            <g>\n                <text x=\"0\" y={height*(1-value)}>{`${value*100}%`}</text>\n                <line key={`axisLine${idx}`} stroke=\"gray\" strokeDasharray=\"5,5\" x1={50} y1={height*value} x2={width+100} y2={height*value}/>\n            </g>\n        ))}\n    </g>\n}\n\nfunction ChartFlag(props : {\n    x: number,\n    y: number\n}) {\n    return <></>\n}\n\nfunction coloringChartMarkers(\n    points : {\n        value : number\n    }[]\n) : string[] {\n    let colors : string[] = [\"black\", ];\n    let diff : number[] = [];\n    for(let i : number = 1; i < points.length; i++) {\n        diff[i-1] = points[i].value - points[i-1].value;\n    }\n    let flag : string = \"\";\n    let curr = 1;\n    while(curr<diff.length) {\n        if(diff[curr]>0) {\n            let next = curr+1;\n            while(next<diff.length) {\n                if(diff[next]<0) {\n                    flag = \"blue\"\n                    break;\n                }else if(diff[next]>0) {\n                    flag = \"black\"\n                    break;\n                }else {\n                    next++;   \n                }\n            }\n            for(let j : number = curr; j < next; j++) {\n                colors[j+1] = flag;\n            }\n            curr += next-curr;\n        }else if(diff[curr]<0) {\n            let next = curr+1;\n            while(next<diff.length) {\n                if(diff[next]<0) {\n                    flag = \"black\"\n                    break;\n                }else if(diff[next]>0) {\n                    flag = \"red\"\n                    break;\n                }else {\n                    next++;\n                }\n            }\n            for(let j : number = curr; j < next; j++) {\n                colors[j+1] = flag;\n            }\n            curr += next-curr;\n        }else {\n            colors[curr+1] = flag;\n            curr++;\n        }\n    }\n    colors[points.length - 1] = \"black\";\n    return colors; \n}\n\nfunction ChartGraph(props : {\n    points : {\n        x : number,\n        y : number,\n        value : number\n    }[]\n}) {\n    const { points } = props;\n    const colors = coloringChartMarkers(points);\n    return <g>\n        <path fill=\"none\" stroke=\"black\" strokeWidth=\"1.5\" d={\n            `M ${points[0].x+50} ${points[0].y}` +\n            points.map(({x, y}) => `L ${x+50}, ${y}`).join(' ')\n        }/>\n        {points.map(({x, y, value}, idx) => <circle key={`${idx}`} cx={x+50} cy={y} r=\"5\" fill={colors[idx]} tabIndex={idx} onFocus={()=>{console.dir(`x, y, value = ${x}, ${y}, ${value}`)}}/>)}\n    </g>\n}\n\nfunction ChartBox(props : {\n    numPlayer : number,\n    maxCall : number,\n    numEnd : number,\n    width : number,\n    height : number\n}) {\n    const {numPlayer, maxCall, numEnd, width, height} = props;\n    const loseMat = getFullLoseProbMat(numPlayer, maxCall, numEnd);\n    const data = loseMat.map((row) => row[0]);\n\n    const xScale = scaleLinear().domain([0, data.length-1]).range([0, width]);\n    const yScale = scaleLinear().domain([0, 1]).range([0, height]);\n    const points = data.map((p, idx) => ({x: xScale(idx), y: yScale(p), value: p}));\n\n    return <Box sx={{p: 3, width: width, height: height}}>\n        <svg viewBox={`-20 -20 ${width+100} ${height+100}`} width={width} height={height}>\n            <AxisTick points={points} width={width} height={height} />\n            <ChartGraph points={points}/>\n        </svg>\n    </Box>\n}\n\nexport default ChartBox"],"names":["AxisTick","props","points","width","height","id","x","map","value","idx","y","stroke","strokeDasharray","x1","y1","x2","y2","ChartGraph","colors","diff","i","length","flag","curr","next","j","coloringChartMarkers","fill","strokeWidth","d","join","cx","cy","r","tabIndex","onFocus","console","dir","numPlayer","maxCall","numEnd","data","getFullLoseProbMat","row","xScale","scaleLinear","domain","range","yScale","p","sx","viewBox"],"sourceRoot":""}