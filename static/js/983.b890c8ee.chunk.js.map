{"version":3,"file":"static/js/983.b890c8ee.chunk.js","mappings":"qKAWA,SAASA,EAAUC,GAMf,IAAOC,EAAUD,EAAVC,OACP,OAAO,iBAAMC,KAAK,OAAOC,OAAO,OAAOC,YAAY,MAAMC,EACrD,YAAKJ,EAAO,GAAGK,EAAf,YAAoBL,EAAO,GAAGM,GAC9BN,EAAOO,KAAI,gBAAEF,EAAF,EAAEA,EAAGC,EAAL,EAAKA,EAAL,kBAAiBD,EAAjB,aAAuBC,MAAKE,KAAK,OAIpD,SAASC,EAAaV,GAMlB,IAAOC,EAAUD,EAAVC,OACP,OAAO,uBACFA,EAAOO,KAAI,WAASG,GAAT,IAAEL,EAAF,EAAEA,EAAGC,EAAL,EAAKA,EAAL,OAAiB,mBAAuBK,GAAIN,EAAGO,GAAIN,EAAGO,EAAE,IAAIZ,KAAK,QAAQa,SAAUJ,GAAlE,UAAgBA,SAgCrD,UA5BA,SAAkBX,GAOd,IAAOgB,EAA6ChB,EAA7CgB,UAAWC,EAAkCjB,EAAlCiB,QAASC,EAAyBlB,EAAzBkB,OAAQC,EAAiBnB,EAAjBmB,MAAOC,EAAUpB,EAAVoB,OAEpCC,GADUC,EAAAA,EAAAA,oBAAmBN,EAAWC,EAASC,GAClCV,KAAI,SAACe,GAAD,OAASA,EAAI,MAEhCC,GAASC,EAAAA,EAAAA,KAAcC,OAAO,CAAC,EAAGL,EAAKM,OAAO,IAAIC,MAAM,CAAC,EAAGT,IAC5DU,GAASJ,EAAAA,EAAAA,KAAcC,OAAO,CAAC,EAAG,IAAIE,MAAM,CAAC,EAAGR,IAChDnB,EAASoB,EAAKb,KAAI,SAACsB,EAAGnB,GAAJ,MAAa,CAACL,EAAGkB,EAAOb,GAAMJ,EAAGsB,EAAOC,OAEhE,OAAO,SAAC,IAAD,CAAKC,GAAI,CAACD,EAAG,EAAGX,MAAOA,EAAOC,OAAQA,GAAtC,UACH,iBAAKD,MAAOA,EAAOC,OAAQA,EAA3B,WACI,kBAGA,0BACI,SAACrB,EAAD,CAAWE,OAAQA,KACnB,SAACS,EAAD,CAAcT,OAAQA","sources":["feature/calculator/Chart.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\nimport { getFullLoseProbMat } from \"baskin-lib/dist/lib/strategy\";\nimport { scaleLinear } from \"d3-scale\";\n\n// function AxisTick(props) {\n//     const {pos} = props.tick;\n//     return <g className=\"tick\" opacity=\"1\" transform={`translate(${pos}, 0})`}>\n//         <line stroke=\"currentColor\"></line>\n//     </g>\n// }\n\nfunction ChartPath(props : {\n    points : {\n        x: number,\n        y: number\n    }[]\n}) {\n    const {points} = props;\n    return <path fill=\"none\" stroke=\"blue\" strokeWidth=\"1.5\" d={\n        `M ${points[0].x} ${points[0].y}` +\n        points.map(({x, y}) => `L ${x}, ${y}`).join(' ')\n    }/>\n}\n\nfunction ChartMarkers(props : {\n    points : {\n        x : number,\n        y : number\n    }[]\n}) {\n    const {points} = props;\n    return <g>\n        {points.map(({x, y}, idx) => <circle key={`${idx}`} cx={x} cy={y} r=\"5\" fill=\"black\" tabIndex={idx}/>)}\n    </g>\n}\n\nfunction ChartBox(props : {\n    numPlayer : number,\n    maxCall : number,\n    numEnd : number,\n    width : number,\n    height : number\n}) {\n    const {numPlayer, maxCall, numEnd, width, height} = props;\n    const loseMat = getFullLoseProbMat(numPlayer, maxCall, numEnd);\n    const data = loseMat.map((row) => row[0]);\n\n    const xScale = scaleLinear().domain([0, data.length-1]).range([0, width]);\n    const yScale = scaleLinear().domain([0, 1]).range([0, height]);\n    const points = data.map((p, idx) => ({x: xScale(idx), y: yScale(p)}))\n\n    return <Box sx={{p: 3, width: width, height: height}}>\n        <svg width={width} height={height}>\n            <g>\n\n            </g>\n            <g>\n                <ChartPath points={points} />\n                <ChartMarkers points={points}/>\n            </g>\n        </svg>\n    </Box>\n}\n\nexport default ChartBox"],"names":["ChartPath","props","points","fill","stroke","strokeWidth","d","x","y","map","join","ChartMarkers","idx","cx","cy","r","tabIndex","numPlayer","maxCall","numEnd","width","height","data","getFullLoseProbMat","row","xScale","scaleLinear","domain","length","range","yScale","p","sx"],"sourceRoot":""}